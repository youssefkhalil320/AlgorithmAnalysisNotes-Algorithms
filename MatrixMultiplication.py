a = [[69, 36, 73, 15, 14, 80, 50, 68, 52, 99, 93, 83, 81, 29, 48, 85, 46, 13, 82, 39, 33, 46, 24, 74, 15, 68, 73, 100, 55, 91, 89, 99], [81, 94, 22, 70, 88, 2, 93, 34, 92, 4, 63, 57, 13, 62, 30, 91, 51, 45, 72, 37, 84, 75, 13, 59, 54, 55, 56, 19, 98, 31, 73, 34], [36, 40, 45, 52, 35, 89, 94, 1, 46, 18, 51, 45, 14, 20, 29, 16, 95, 46, 11, 39, 64, 2, 34, 39, 61, 11, 70, 86, 25, 38, 62, 100], [8, 53, 2, 40, 100, 93, 98, 20, 16, 31, 98, 76, 45, 99, 53, 41, 76, 21, 27, 68, 77, 8, 5, 34, 93, 73, 65, 81, 19, 87, 8, 79], [82, 38, 5, 78, 90, 52, 63, 62, 98, 59, 21, 62, 61, 21, 79, 54, 52, 86, 8, 100, 70, 61, 46, 38, 3, 87, 88, 32, 65, 
91, 94, 14], [27, 69, 81, 17, 43, 99, 76, 77, 87, 85, 64, 24, 26, 35, 32, 97, 37, 78, 58, 23, 6, 93, 34, 16, 59, 56, 91, 39, 55, 82, 25, 6], [84, 71, 75, 87, 77, 29, 8, 43, 21, 82, 59, 77, 44, 2, 7, 27, 11, 98, 19, 14, 30, 9, 80, 25, 48, 78, 54, 19, 97, 82, 21, 63], [100, 94, 11, 35, 29, 12, 72, 65, 88, 30, 62, 59, 35, 66, 3, 46, 72, 96, 66, 27, 91, 36, 43, 5, 9, 86, 35, 48, 
63, 56, 96, 23], [50, 19, 15, 14, 1, 29, 63, 44, 100, 18, 66, 30, 2, 20, 87, 73, 70, 31, 74, 83, 66, 5, 63, 80, 22, 11, 99, 50, 21, 28, 99, 13], [97, 47, 96, 53, 51, 69, 46, 87, 12, 49, 74, 60, 35, 4, 42, 47, 39, 75, 92, 54, 58, 25, 100, 98, 85, 60, 61, 82, 6, 8, 14, 55], [100, 60, 34, 8, 29, 91, 18, 24, 21, 83, 19, 92, 91, 10, 21, 88, 76, 65, 73, 49, 90, 63, 74, 52, 90, 10, 
24, 63, 6, 29, 29, 49], [100, 12, 17, 29, 72, 85, 85, 99, 27, 26, 67, 8, 96, 3, 95, 97, 79, 52, 3, 97, 48, 51, 13, 62, 75, 74, 12, 83, 64, 89, 36, 44], [98, 13, 40, 10, 5, 50, 76, 66, 85, 86, 85, 17, 46, 21, 69, 86, 7, 22, 5, 85, 39, 48, 62, 44, 72, 70, 28, 56, 41, 23, 56, 2], [89, 31, 8, 57, 26, 76, 62, 82, 85, 43, 11, 21, 87, 39, 3, 80, 66, 17, 41, 52, 6, 62, 38, 77, 47, 68, 58, 36, 24, 91, 87, 16], [71, 72, 48, 54, 11, 15, 70, 15, 57, 46, 30, 62, 36, 87, 21, 44, 39, 79, 84, 91, 54, 23, 73, 42, 42, 55, 81, 99, 64, 70, 94, 5], [44, 66, 32, 48, 74, 92, 28, 13, 13, 90, 91, 22, 98, 63, 24, 79, 91, 78, 32, 83, 5, 72, 21, 99, 
26, 40, 13, 56, 59, 5, 35, 20], [87, 33, 68, 65, 24, 16, 61, 79, 100, 3, 81, 98, 69, 84, 51, 79, 17, 77, 37, 41, 46, 72, 49, 34, 49, 45, 73, 14, 45, 11, 27, 27], [74, 92, 76, 2, 19, 70, 83, 97, 34, 13, 6, 55, 91, 16, 90, 35, 24, 59, 39, 6, 97, 15, 39, 
25, 70, 4, 71, 71, 8, 83, 29, 17], [2, 83, 78, 27, 68, 25, 59, 27, 96, 54, 6, 74, 44, 22, 20, 32, 59, 96, 77, 17, 36, 38, 59, 
11, 5, 83, 65, 70, 36, 8, 76, 73], [32, 66, 24, 8, 10, 13, 4, 25, 49, 11, 32, 48, 92, 12, 76, 75, 47, 88, 68, 64, 15, 42, 71, 
6, 30, 97, 33, 87, 83, 12, 21, 70], [3, 61, 1, 76, 64, 6, 55, 75, 5, 47, 38, 72, 99, 17, 71, 2, 21, 62, 11, 38, 100, 83, 6, 66, 52, 53, 8, 12, 73, 89, 4, 56], [24, 36, 44, 26, 36, 12, 91, 61, 89, 82, 76, 90, 90, 77, 46, 20, 17, 90, 41, 69, 18, 47, 1, 40, 27, 2, 56, 84, 86, 43, 9, 44], [54, 52, 100, 30, 78, 56, 84, 25, 83, 1, 7, 19, 48, 4, 94, 96, 97, 60, 13, 23, 96, 82, 61, 70, 3, 84, 66, 18, 72, 75, 54, 69], [61, 9, 31, 64, 90, 97, 27, 61, 100, 63, 14, 53, 85, 91, 6, 100, 10, 54, 41, 17, 47, 21, 98, 32, 49, 9, 87, 73, 58, 71, 77, 94], [94, 33, 77, 65, 8, 74, 11, 42, 98, 17, 21, 33, 85, 50, 50, 71, 14, 23, 26, 62, 73, 61, 
55, 81, 82, 100, 27, 55, 2, 49, 23, 57], [23, 72, 94, 56, 20, 88, 27, 62, 77, 34, 68, 26, 96, 82, 16, 66, 78, 67, 46, 100, 16, 24, 80, 14, 40, 16, 80, 63, 55, 54, 48, 24], [14, 5, 9, 88, 65, 99, 52, 38, 77, 41, 75, 85, 25, 44, 16, 2, 80, 5, 85, 34, 44, 40, 47, 74, 85, 15, 70, 52, 48, 5, 17, 44], [94, 32, 1, 20, 84, 67, 84, 31, 70, 67, 100, 76, 36, 91, 5, 55, 90, 91, 58, 36, 77, 33, 67, 60, 78, 24, 8, 2, 39, 61, 76, 24], [34, 72, 89, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

b = [[14, 33, 15, 93, 3, 75, 21, 21, 6, 60, 92, 74, 52, 53, 45, 24, 23, 9, 63, 13, 56, 29, 8, 64, 81, 15, 41, 66, 24, 38, 99, 27], [32, 4, 37, 45, 20, 29, 35, 26, 10, 47, 45, 91, 8, 47, 74, 79, 62, 94, 5, 11, 85, 86, 39, 85, 35, 27, 69, 7, 31, 4, 94, 89], 
[14, 45, 65, 24, 63, 83, 35, 23, 95, 48, 21, 74, 5, 89, 99, 100, 69, 94, 74, 2, 86, 8, 34, 62, 31, 2, 84, 99, 82, 26, 47, 21], [96, 15, 81, 53, 61, 91, 37, 20, 36, 54, 93, 89, 25, 36, 68, 41, 92, 7, 48, 82, 60, 60, 59, 11, 98, 86, 39, 76, 3, 76, 21, 44], [55, 81, 18, 98, 98, 22, 93, 83, 77, 80, 8, 60, 97, 90, 62, 38, 38, 42, 51, 26, 49, 95, 43, 38, 74, 56, 76, 16, 83, 91, 3, 
81], [17, 65, 72, 93, 56, 5, 77, 1, 81, 62, 19, 68, 5, 52, 59, 48, 100, 4, 47, 62, 97, 9, 3, 75, 24, 65, 54, 74, 23, 67, 90, 98], [78, 30, 33, 70, 53, 32, 80, 4, 88, 11, 89, 82, 99, 94, 44, 2, 37, 53, 23, 24, 2, 23, 69, 57, 32, 40, 2, 90, 33, 42, 23, 71], [54, 6, 39, 23, 40, 29, 36, 47, 70, 25, 30, 32, 23, 99, 38, 39, 2, 90, 97, 92, 15, 29, 64, 90, 37, 8, 7, 56, 20, 14, 76, 36], [4, 48, 98, 27, 96, 2, 97, 93, 44, 1, 37, 90, 17, 35, 2, 41, 39, 45, 10, 55, 11, 59, 35, 57, 76, 51, 23, 57, 13, 49, 75, 28], [87, 44, 84, 82, 11, 70, 33, 98, 65, 81, 100, 38, 48, 71, 47, 49, 82, 71, 13, 26, 63, 42, 10, 74, 71, 29, 5, 77, 68, 73, 85, 14], [43, 4, 70, 28, 35, 18, 20, 26, 11, 85, 29, 45, 4, 53, 95, 91, 94, 97, 25, 97, 38, 81, 69, 91, 34, 99, 20, 14, 73, 15, 44, 83], [7, 38, 86, 40, 36, 37, 88, 62, 80, 47, 12, 33, 18, 4, 26, 76, 10, 41, 11, 39, 25, 67, 67, 35, 20, 13, 85, 65, 60, 83, 84, 1], [57, 4, 69, 22, 10, 96, 33, 64, 71, 5, 17, 23, 1, 96, 76, 52, 57, 54, 88, 75, 83, 11, 11, 50, 35, 30, 29, 87, 57, 30, 11, 22], [81, 42, 84, 44, 82, 76, 56, 10, 72, 5, 13, 66, 69, 34, 80, 73, 3, 88, 48, 48, 53, 53, 79, 19, 1, 36, 20, 29, 98, 
88, 88, 75], [1, 70, 46, 72, 40, 91, 6, 65, 24, 60, 4, 8, 45, 64, 22, 87, 26, 76, 81, 47, 74, 61, 68, 97, 6, 85, 53, 53, 60, 88, 42, 92], [95, 55, 72, 54, 52, 10, 40, 35, 80, 71, 39, 69, 30, 90, 15, 94, 91, 71, 90, 94, 83, 88, 43, 82, 12, 87, 66, 95, 36, 30, 18, 15], [94, 90, 91, 51, 8, 73, 10, 66, 48, 16, 24, 73, 99, 14, 79, 15, 38, 68, 7, 52, 42, 19, 81, 17, 3, 16, 74, 73, 
28, 58, 12, 85], [23, 26, 84, 98, 88, 98, 41, 54, 25, 18, 95, 24, 82, 55, 98, 76, 99, 25, 44, 5, 98, 21, 91, 19, 45, 49, 38, 1, 99, 10, 24, 5], [71, 14, 96, 99, 86, 58, 79, 18, 76, 35, 88, 49, 75, 48, 21, 17, 28, 14, 76, 18, 60, 4, 78, 12, 67, 98, 27, 
21, 59, 96, 75, 19], [15, 84, 95, 47, 95, 42, 69, 75, 91, 28, 77, 32, 16, 57, 6, 46, 55, 77, 21, 77, 91, 74, 58, 28, 95, 63, 94, 9, 83, 28, 15, 70], [41, 16, 3, 12, 43, 100, 13, 83, 93, 55, 32, 53, 20, 92, 22, 70, 94, 1, 95, 5, 68, 14, 47, 50, 38, 77, 
29, 9, 7, 45, 97, 44], [91, 92, 15, 9, 88, 88, 61, 26, 93, 39, 91, 80, 5, 68, 72, 37, 31, 57, 74, 6, 17, 97, 64, 33, 51, 91, 29, 34, 79, 88, 7, 65], [54, 22, 84, 16, 16, 24, 6, 12, 19, 96, 31, 74, 64, 7, 26, 48, 15, 7, 55, 16, 61, 74, 21, 9, 69, 16, 28, 77, 36, 90, 70, 40], [1, 85, 36, 100, 7, 83, 66, 84, 72, 81, 81, 71, 47, 88, 83, 90, 68, 86, 4, 98, 56, 54, 56, 84, 49, 91, 
83, 87, 71, 34, 100, 16], [6, 87, 45, 26, 68, 13, 27, 5, 70, 3, 3, 22, 87, 99, 75, 44, 98, 56, 67, 69, 28, 98, 10, 95, 23, 84, 39, 13, 41, 8, 36, 3], [46, 57, 15, 97, 27, 81, 38, 5, 81, 8, 82, 41, 64, 47, 53, 76, 71, 79, 54, 95, 61, 25, 63, 56, 13, 32, 54, 1, 86, 16, 79, 91], [1, 47, 38, 49, 91, 70, 47, 22, 87, 30, 24, 45, 76, 99, 27, 32, 57, 87, 57, 60, 70, 16, 92, 31, 70, 42, 65, 30, 47, 87, 55, 30], [52, 97, 59, 47, 79, 50, 54, 65, 81, 36, 49, 82, 56, 100, 8, 20, 75, 94, 94, 54, 83, 6, 12, 97, 53, 9, 43, 43, 53, 62, 33, 48], [37, 87, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

#!/usr/bin/python

# Core Library modules
from math import ceil, log
from optparse import OptionParser


def read(filename):
    lines = open(filename).read().splitlines()
    A = []
    B = []
    matrix = A
    for line in lines:
        if line != "":
            matrix.append([int(el) for el in line.split("\t")])
        else:
            matrix = B
    return A, B


def print_matrix(matrix):
    for line in matrix:
        print("\t".join(map(str, line)))


def ikj_matrix_product(A, B):
    n = len(A)
    C = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for k in range(n):
            for j in range(n):
                C[i][j] += A[i][k] * B[k][j]
    return C


def add(A, B):
    n = len(A)
    C = [[0 for j in range(0, n)] for i in range(0, n)]
    for i in range(0, n):
        for j in range(0, n):
            C[i][j] = A[i][j] + B[i][j]
    return C


def subtract(A, B):
    n = len(A)
    C = [[0 for j in range(0, n)] for i in range(0, n)]
    for i in range(0, n):
        for j in range(0, n):
            C[i][j] = A[i][j] - B[i][j]
    return C


def strassenR(A, B):
    n = len(A)

    if n <= LEAF_SIZE:
        return ikj_matrix_product(A, B)
    else:
        # initializing the new sub-matrices
        new_size = n // 2
        a11 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        a12 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        a21 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        a22 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]

        b11 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        b12 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        b21 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        b22 = [[0 for j in range(0, new_size)] for i in range(0, new_size)]

        aResult = [[0 for j in range(0, new_size)] for i in range(0, new_size)]
        bResult = [[0 for j in range(0, new_size)] for i in range(0, new_size)]

        # dividing the matrices in 4 sub-matrices:
        for i in range(0, new_size):
            for j in range(0, new_size):
                a11[i][j] = A[i][j]  # top left
                a12[i][j] = A[i][j + new_size]  # top right
                a21[i][j] = A[i + new_size][j]  # bottom left
                a22[i][j] = A[i + new_size][j + new_size]  # bottom right

                b11[i][j] = B[i][j]  # top left
                b12[i][j] = B[i][j + new_size]  # top right
                b21[i][j] = B[i + new_size][j]  # bottom left
                b22[i][j] = B[i + new_size][j + new_size]  # bottom right

        # Calculating p1 to p7:
        aResult = add(a11, a22)
        bResult = add(b11, b22)
        p1 = strassenR(aResult, bResult)  # p1 = (a11+a22) * (b11+b22)

        aResult = add(a21, a22)  # a21 + a22
        p2 = strassenR(aResult, b11)  # p2 = (a21+a22) * (b11)

        bResult = subtract(b12, b22)  # b12 - b22
        p3 = strassenR(a11, bResult)  # p3 = (a11) * (b12 - b22)

        bResult = subtract(b21, b11)  # b21 - b11
        p4 = strassenR(a22, bResult)  # p4 = (a22) * (b21 - b11)

        aResult = add(a11, a12)  # a11 + a12
        p5 = strassenR(aResult, b22)  # p5 = (a11+a12) * (b22)

        aResult = subtract(a21, a11)  # a21 - a11
        bResult = add(b11, b12)  # b11 + b12
        p6 = strassenR(aResult, bResult)  # p6 = (a21-a11) * (b11+b12)

        aResult = subtract(a12, a22)  # a12 - a22
        bResult = add(b21, b22)  # b21 + b22
        p7 = strassenR(aResult, bResult)  # p7 = (a12-a22) * (b21+b22)

        # calculating c21, c21, c11 e c22:
        c12 = add(p3, p5)  # c12 = p3 + p5
        c21 = add(p2, p4)  # c21 = p2 + p4

        aResult = add(p1, p4)  # p1 + p4
        bResult = add(aResult, p7)  # p1 + p4 + p7
        c11 = subtract(bResult, p5)  # c11 = p1 + p4 - p5 + p7

        aResult = add(p1, p3)  # p1 + p3
        bResult = add(aResult, p6)  # p1 + p3 + p6
        c22 = subtract(bResult, p2)  # c22 = p1 + p3 - p2 + p6

        # Grouping the results obtained in a single matrix:
        C = [[0 for j in range(0, n)] for i in range(0, n)]
        for i in range(0, new_size):
            for j in range(0, new_size):
                C[i][j] = c11[i][j]
                C[i][j + new_size] = c12[i][j]
                C[i + new_size][j] = c21[i][j]
                C[i + new_size][j + new_size] = c22[i][j]
        return C


def strassen(A, B):
    assert type(A) == list and type(B) == list
    assert len(A) == len(A[0]) == len(B) == len(B[0])

    # Make the matrices bigger so that you can apply the strassen
    # algorithm recursively without having to deal with odd
    # matrix sizes
    nextPowerOfTwo = lambda n: 2 ** int(ceil(log(n, 2)))
    n = len(A)
    m = nextPowerOfTwo(n)
    APrep = [[0 for i in range(m)] for j in range(m)]
    BPrep = [[0 for i in range(m)] for j in range(m)]
    for i in range(n):
        for j in range(n):
            APrep[i][j] = A[i][j]
            BPrep[i][j] = B[i][j]
    CPrep = strassenR(APrep, BPrep)
    C = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            C[i][j] = CPrep[i][j]
    return C


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option(
        "-i",
        dest="filename",
        default="2000.in",
        help="input file with two matrices",
        metavar="FILE",
    )
    parser.add_option(
        "-l",
        dest="LEAF_SIZE",
        default="8",
        help="when do you start using ikj",
        metavar="LEAF_SIZE",
    )
    (options, args) = parser.parse_args()

    LEAF_SIZE = int(options.LEAF_SIZE)

    C = strassen(a, b)
    import numpy as np
    arr = np.array(C) 
    arr.resize((30, 30))
    arr = arr.tolist()
    print_matrix(arr)